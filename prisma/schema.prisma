// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id            String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email         String         @unique
  passwordHash  String         @map("password_hash")
  fullName      String         @map("full_name")
  createdAt     DateTime       @default(now()) @map("created_at")
  categories    Category[]
  transactions  Transaction[]
  budgets       Budget[]
  subscription  Subscription?

  @@map("users")
}

model Category {
  id          Int           @id @default(autoincrement())
  userId      String        @map("user_id") @db.Uuid
  name        String
  type        CategoryType
  createdAt   DateTime      @default(now()) @map("created_at")
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
  budgets      Budget[]

  @@map("categories")
}

model Transaction {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId          String    @map("user_id") @db.Uuid
  categoryId      Int?      @map("category_id")
  amount          Decimal   @db.Decimal(10, 2)
  type            TransactionType
  description     String?
  transactionDate DateTime  @map("transaction_date") @db.Date
  createdAt       DateTime  @default(now()) @map("created_at")
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  category        Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  @@map("transactions")
}

model Budget {
  id          Int         @id @default(autoincrement())
  userId      String      @map("user_id") @db.Uuid
  categoryId  Int         @map("category_id")
  period      BudgetPeriod
  amount      Decimal     @db.Decimal(10, 2)
  startDate   DateTime    @map("start_date") @db.Date
  endDate     DateTime    @map("end_date") @db.Date
  createdAt   DateTime    @default(now()) @map("created_at")
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  category    Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@map("budgets")
}

model Subscription {
  id                  Int       @id @default(autoincrement())
  userId              String    @unique @map("user_id") @db.Uuid
  stripeCustomerId    String    @unique @map("stripe_customer_id")
  stripeSubscriptionId String   @unique @map("stripe_subscription_id")
  status              SubscriptionStatus
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime  @default(now()) @updatedAt @map("updated_at")
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

enum CategoryType {
  income
  expense
}

enum TransactionType {
  income
  expense
}

enum BudgetPeriod {
  monthly
  yearly
}

enum SubscriptionStatus {
  active
  canceled
  past_due
}

